---
apiVersion: apps/v1
kind: Deployment                 # Type of Kubernetes resource
metadata:
  name: go-cb-test-endpoint           # Name of the Kubernetes resource
spec:
  replicas: 2                    # Number of pods to run at any given time
  selector:
    matchLabels:
      app: go-cb-test-endpoint        # This deployment applies to any Pods matching the specified label
  template:                      # This deployment will create a set of pods using the configurations in this template
    metadata:
      labels:                    # The labels that will be applied to all of the pods in this deployment
        app: go-cb-test-endpoint 
    spec:                        # Spec for the container which will run in the Pod
      containers:
      - name: go-cb-test-endpoint
        image: vimalhirapara/go-cb-test-endpoint:1.0.0 
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: 3000  # Should match the port number that the Go application listens on
        livenessProbe:           # To check the health of the Pod
          httpGet:
            path: /healthcheck
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 15
          timeoutSeconds: 5

---

apiVersion: v1
kind: Service                    # Type of kubernetes resource
metadata:
  name: go-cb-test-endpoint-service   # Name of the resource
spec:
  type: NodePort                 # A port is opened on each node in your cluster via Kube proxy.
  ports:                         # Take incoming HTTP requests on port 3001 and forward them to the targetPort of 3000
  - name: http
    port: 3001
    targetPort: 3000
  selector:
    app: go-cb-test-endpoint         # Map any pod with label `app=go-cb-test-endpoint` to this service